#!/usr/bin/env python
#################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#################################################################################

import rospy
import pyqtgraph as pg
import sys
import pickle
from std_msgs.msg import Float32MultiArray, Float32
from PyQt5.QtGui import *
from PyQt5.QtCore import *

from PyQt5.QtWidgets import QApplication, QMainWindow

import csv
import os
sys.path.append(os.path.dirname(os.path.abspath(os.path.dirname(__file__))))
#from pathlib import Path

class Window(QMainWindow):
    def __init__(self):
        super(Window, self).__init__()
        self.setWindowTitle("Result")
        # self.setGeometry(50, 50, 600, 650)
        # self.setGeometry(1080, 1080, 600, 650)
        self.setGeometry(200, 200, 2400, 2600)
        self.graph_sub = rospy.Subscriber('result', Float32MultiArray, self.data)
        self.ep = []
        self.data = []
        self.rewards = []
        self.GoalRates = []
        self.epsilons = []
        self.actor_loss = []
        self.critic_loss = []
        self.x = []
        self.count = 1
        self.size_ep = 0

        self.CSVSavePath = os.path.dirname(os.path.realpath(__file__))
        self.CSVSavePath = self.CSVSavePath.replace('src/turtlebot3_machine_learning/turtlebot3_dqn/nodes', 'turtlebot3_dqn_results_data/CSV_Stage_4_ddpg_herrbilbo/')
    	#self.CSVSavePath = self.CSVSavePath.replace('src/turtlebot3_machine_learning/turtlebot3_dqn/nodes', 'CSV_Stage_1/')
    	#os.makedirs(self.CSVSavePath, exist_ok=True)

        try:
            os.makedirs(self.CSVSavePath)
        except OSError as e:
            #print("CSV Directory exists")
            pass

        #load_data = False
        load_data = True

        if load_data:
            self.ep, self.data, self.rewards, self.GoalRates, self.epsilons, self.actor_loss, self.critic_loss = self.load_data()
            self.size_ep = len(self.ep)
        self.plot()

    def data(self, data):
        self.data.append(data.data[0])
        self.ep.append(self.size_ep + self.count)
        self.count += 1
        self.rewards.append(data.data[1])
        self.GoalRates.append(data.data[2])
        self.epsilons.append(data.data[3])
        self.actor_loss.append(data.data[4])
        self.critic_loss.append(data.data[5])


    def plot(self):
        self.qValuePlt = pg.PlotWidget(self, title="Average max Q-value")
        self.qValuePlt.move(0, 10)
        self.qValuePlt.resize(600, 300)
        self.timer1 = pg.QtCore.QTimer()
        self.timer1.timeout.connect(self.update)
        self.timer1.start(500)

        self.rewardsPlt = pg.PlotWidget(self, title="Total reward")
        self.rewardsPlt.move(640, 10)
        self.rewardsPlt.resize(600, 300)
        self.timer2 = pg.QtCore.QTimer()
        self.timer2.timeout.connect(self.update)
        self.timer2.start(400)


        self.GoalRatesPlt = pg.PlotWidget(self, title="Goal rates")
        self.GoalRatesPlt.move(0, 320)
        self.GoalRatesPlt.resize(600, 300)
        self.timer3 = pg.QtCore.QTimer()
        self.timer3.timeout.connect(self.update)
        self.timer3.start(300)

        self.EpsilonPlt = pg.PlotWidget(self, title="Epsilons")
        self.EpsilonPlt.move(640, 320)
        self.EpsilonPlt.resize(600, 300)
        self.timer4 = pg.QtCore.QTimer()
        self.timer4.timeout.connect(self.update)
        self.timer4.start(200)

        self.ActorLossPlt = pg.PlotWidget(self, title="Actor Loss")
        self.ActorLossPlt.move(0, 640)
        self.ActorLossPlt.resize(600, 300)
        self.timer5 = pg.QtCore.QTimer()
        self.timer5.timeout.connect(self.update)
        self.timer5.start(100)

        self.CriticLossPlt = pg.PlotWidget(self, title="Critic Loss")
        self.CriticLossPlt.move(640, 640)
        self.CriticLossPlt.resize(600, 300)
        self.timer6 = pg.QtCore.QTimer()
        self.timer6.timeout.connect(self.update)
        self.timer6.start(0)

        self.show()

    def update(self):
        self.rewardsPlt.showGrid(x=True, y=True)
        self.qValuePlt.showGrid(x=True, y=True)
        self.GoalRatesPlt.showGrid(x=True, y=True)
        self.EpsilonPlt.showGrid(x=True, y=True)
        self.ActorLossPlt.showGrid(x=True, y=True)
        self.CriticLossPlt.showGrid(x=True, y=True)
        self.rewardsPlt.plot(self.ep, self.data, pen=(255, 0, 0))

        fields = list(self.ep)

        with open(self.CSVSavePath + "Stage" + "_" + "4" + "_" + "Total_Rewards" + ".csv", "w") as f:
            # using csv.writer method from CSV package
            write = csv.writer(f)

            row = []
            row.append("Episodes")
            row.append("Total Reward")
            write.writerow(row)

            for i in range(len(fields)):
                row = []
                row.append(fields[i])
                row.append(self.data[i])
                write.writerow(row)

        self.save_data([self.ep, self.data, self.rewards, self.GoalRates, self.epsilons, self.actor_loss, self.critic_loss])
        self.qValuePlt.plot(self.ep, self.rewards, pen=(0, 255, 0))
        self.GoalRatesPlt.plot(self.ep, self.GoalRates, pen=(255, 255, 0))
        self.EpsilonPlt.plot(self.ep, self.epsilons, pen=(255, 0, 255))
        self.ActorLossPlt.plot(self.ep, self.actor_loss, pen=(0, 255, 255))
        self.CriticLossPlt.plot(self.ep, self.critic_loss, pen=(255, 255, 255))

        with open(self.CSVSavePath + "Stage" + "_" + "4" + "_" + "Average_Max_Q_Value" +  ".csv", "w") as f:
            # using csv.writer method from CSV package
            write = csv.writer(f)

            row = []
            row.append("Episodes")
            row.append("Average Max Q-Value")
            write.writerow(row)

            for i in range(len(fields)):
                row = []
                row.append(fields[i])
                row.append(self.rewards[i])
                write.writerow(row)

        with open(self.CSVSavePath + "Stage" + "_" + "4" + "_" + "Goal_Rates" +  ".csv", "w") as f:
            # using csv.writer method from CSV package
            write = csv.writer(f)

            row = []
            row.append("Episodes")
            row.append("Goal Rates")
            write.writerow(row)

            for i in range(len(fields)):
                row = []
                row.append(fields[i])
                row.append(self.GoalRates[i])
                write.writerow(row)

        with open(self.CSVSavePath + "Stage" + "_" + "4" + "_" + "Epsilons" +  ".csv", "w") as f:
            # using csv.writer method from CSV package
            write = csv.writer(f)

            row = []
            row.append("Episodes")
            row.append("Epsilons")
            write.writerow(row)

            for i in range(len(fields)):
                row = []
                row.append(fields[i])
                row.append(self.epsilons[i])
                write.writerow(row)


        with open(self.CSVSavePath + "Stage" + "_" + "4" + "_" + "Actor_Loss" +  ".csv", "w") as f:
            # using csv.writer method from CSV package
            write = csv.writer(f)

            row = []
            row.append("Episodes")
            row.append("Actor Loss")
            write.writerow(row)

            for i in range(len(fields)):
                row = []
                row.append(fields[i])
                row.append(self.actor_loss[i])
                write.writerow(row)

        with open(self.CSVSavePath + "Stage" + "_" + "4" + "_" + "Critic_Loss" +  ".csv", "w") as f:
            # using csv.writer method from CSV package
            write = csv.writer(f)

            row = []
            row.append("Episodes")
            row.append("Critic Loss")
            write.writerow(row)

            for i in range(len(fields)):
                row = []
                row.append(fields[i])
                row.append(self.critic_loss[i])
                write.writerow(row)

    def load_data(self):
        try:
            with open(self.CSVSavePath + "graph.txt", "rb") as f:
                x, y, z, a, b, c, d = pickle.load(f)
        except:
            x, y, z, a, b, c, d = [], [], [], [], [], [], []
        return x, y, z, a, b, c, d

    def save_data(self, data):
        with open(self.CSVSavePath + "graph.txt", "wb") as f:
            pickle.dump(data, f)


def run():
        rospy.init_node('graph')
        app = QApplication(sys.argv)
        GUI = Window()
        sys.exit(app.exec_())

run()
